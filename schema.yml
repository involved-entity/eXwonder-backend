openapi: 3.0.3
info:
  title: eXwonder
  version: 1.1.0
paths:
  /api/v1/account/account/:
    get:
      operationId: account_account_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: query
        name: search
        schema:
          type: string
        description: Search username query. Length must be 3 and more. Required.
        required: true
      tags:
      - account
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserList'
          description: ''
    post:
      operationId: account_account_create
      tags:
      - account
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetail'
          description: ''
  /api/v1/account/account/{id}/:
    get:
      operationId: account_account_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Пользователь.
        required: true
      tags:
      - account
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    put:
      operationId: account_account_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Пользователь.
        required: true
      tags:
      - account
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetail'
          description: ''
    patch:
      operationId: account_account_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Пользователь.
        required: true
      tags:
      - account
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserDetail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserDetail'
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetail'
          description: ''
  /api/v1/account/account/login/:
    post:
      operationId: account_account_login_create
      tags:
      - account
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthToken'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AuthToken'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AuthToken'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
          description: ''
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedCode'
          description: ''
        '400':
          description: No response body
  /api/v1/account/account/my/:
    get:
      operationId: account_account_my_retrieve
      tags:
      - account
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetail'
          description: ''
  /api/v1/account/account/two_factor_authentication/:
    post:
      operationId: account_account_two_factor_authentication_create
      tags:
      - account
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TwoFactorAuthenticationCode'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TwoFactorAuthenticationCode'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TwoFactorAuthenticationCode'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedCode'
          description: ''
  /api/v1/account/followers/:
    get:
      operationId: account_followers_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - account
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedFollowerList'
          description: ''
  /api/v1/account/followings/:
    get:
      operationId: account_followings_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: query
        name: search
        schema:
          type: string
        description: Search username query.
      tags:
      - account
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedFollowingList'
          description: ''
    post:
      operationId: account_followings_create
      tags:
      - account
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Following'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Following'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Following'
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Following'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedCode'
          description: ''
  /api/v1/account/followings/disfollow/:
    delete:
      operationId: account_followings_disfollow_destroy
      tags:
      - account
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '204':
          description: No response body
        '400':
          description: No response body
  /api/v1/account/followings/user/{id}/:
    get:
      operationId: account_followings_user_list
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - account
      security:
      - cookieAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedFollowingList'
          description: ''
  /api/v1/account/password-change/:
    post:
      operationId: account_password_change_create
      description: |-
        Calls Django Auth SetPasswordForm save method.

        Accepts the following POST parameters: new_password1, new_password2
        Returns the success/fail message.
      tags:
      - account
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordChange'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordChange'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordChange'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /api/v1/account/password-reset/:
    post:
      operationId: account_password_reset_create
      description: |-
        Calls Django Auth PasswordResetForm save method.

        Accepts the following POST parameters: email
        Returns the success/fail message.
      tags:
      - account
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordReset'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordReset'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordReset'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /api/v1/account/password-reset-confirm/:
    post:
      operationId: account_password_reset_confirm_create
      description: |-
        Password reset e-mail link is confirmed, therefore
        this resets the user's password.

        Accepts the following POST parameters: token, uid,
            new_password1, new_password2
        Returns the success/fail message.
      tags:
      - account
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /api/v1/posts/comments/:
    get:
      operationId: posts_comments_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: query
        name: post_id
        schema:
          type: integer
        description: Post id to get comments.
      tags:
      - posts
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCommentList'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedCode'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedCode'
          description: ''
    post:
      operationId: posts_comments_create
      tags:
      - posts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostID'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PostID'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PostID'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedCode'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedCode'
          description: ''
  /api/v1/posts/comments/{id}/:
    delete:
      operationId: posts_comments_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this comment.
        required: true
      tags:
      - posts
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '204':
          description: No response body
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedCode'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedCode'
          description: ''
  /api/v1/posts/likes/:
    post:
      operationId: posts_likes_create
      tags:
      - posts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostID'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PostID'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PostID'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Like'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedCode'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedCode'
          description: ''
  /api/v1/posts/likes/{post_id}/:
    delete:
      operationId: posts_likes_destroy
      parameters:
      - in: path
        name: post_id
        schema:
          type: integer
        description: A unique integer value identifying this like.
        required: true
      tags:
      - posts
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '204':
          description: No response body
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedCode'
          description: ''
  /api/v1/posts/posts/:
    get:
      operationId: posts_posts_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: query
        name: top
        schema:
          type: string
        description: Valid values is 'likes', 'recent' and 'updates'. Filter posts
          by top. Cant be used with 'user'.
      - in: query
        name: user
        schema:
          type: string
        description: Author of posts (username). Default is request sender.
      tags:
      - posts
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPostList'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedCode'
          description: ''
    post:
      operationId: posts_posts_create
      tags:
      - posts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Post'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Post'
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedCode'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedCode'
          description: ''
  /api/v1/posts/posts/{id}/:
    get:
      operationId: posts_posts_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - posts
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedCode'
          description: ''
    delete:
      operationId: posts_posts_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - posts
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '204':
          description: No response body
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedCode'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedCode'
          description: ''
  /api/v1/schema/:
    get:
      operationId: schema_retrieve
      description: |-
        OpenApi3 schema for this API. Format can be selected via content negotiation.

        - YAML: application/vnd.oai.openapi
        - JSON: application/vnd.oai.openapi+json
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: lang
        schema:
          type: string
          enum:
          - af
          - ar
          - ar-dz
          - ast
          - az
          - be
          - bg
          - bn
          - br
          - bs
          - ca
          - ckb
          - cs
          - cy
          - da
          - de
          - dsb
          - el
          - en
          - en-au
          - en-gb
          - eo
          - es
          - es-ar
          - es-co
          - es-mx
          - es-ni
          - es-ve
          - et
          - eu
          - fa
          - fi
          - fr
          - fy
          - ga
          - gd
          - gl
          - he
          - hi
          - hr
          - hsb
          - hu
          - hy
          - ia
          - id
          - ig
          - io
          - is
          - it
          - ja
          - ka
          - kab
          - kk
          - km
          - kn
          - ko
          - ky
          - lb
          - lt
          - lv
          - mk
          - ml
          - mn
          - mr
          - ms
          - my
          - nb
          - ne
          - nl
          - nn
          - os
          - pa
          - pl
          - pt
          - pt-br
          - ro
          - ru
          - sk
          - sl
          - sq
          - sr
          - sr-latn
          - sv
          - sw
          - ta
          - te
          - tg
          - th
          - tk
          - tr
          - tt
          - udm
          - ug
          - uk
          - ur
          - uz
          - vi
          - zh-hans
          - zh-hant
      tags:
      - schema
      security:
      - cookieAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/vnd.oai.openapi:
              schema:
                type: object
                additionalProperties: {}
            application/yaml:
              schema:
                type: object
                additionalProperties: {}
            application/vnd.oai.openapi+json:
              schema:
                type: object
                additionalProperties: {}
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
components:
  schemas:
    AuthToken:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        token:
          type: string
          readOnly: true
      required:
      - password
      - token
      - username
    Comment:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        author:
          allOf:
          - $ref: '#/components/schemas/User'
          readOnly: true
        post:
          type: integer
          readOnly: true
        comment:
          type: string
          minLength: 10
          maxLength: 2048
      required:
      - author
      - comment
      - id
      - post
    DetailedCode:
      type: object
      properties:
        detail:
          type: string
        code:
          type: string
          maxLength: 32
      required:
      - code
      - detail
    Follower:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        follower:
          allOf:
          - $ref: '#/components/schemas/User'
          readOnly: true
      required:
      - follower
      - id
    Following:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        following:
          allOf:
          - $ref: '#/components/schemas/User'
          readOnly: true
      required:
      - following
      - id
    Like:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        author:
          type: integer
          readOnly: true
        post:
          type: integer
          readOnly: true
      required:
      - author
      - id
      - post
    PaginatedCommentList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
    PaginatedFollowerList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Follower'
    PaginatedFollowingList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Following'
    PaginatedPostList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Post'
    PaginatedUserList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/User'
    PasswordChange:
      type: object
      properties:
        old_password:
          type: string
          maxLength: 128
        new_password1:
          type: string
          maxLength: 128
        new_password2:
          type: string
          maxLength: 128
      required:
      - new_password1
      - new_password2
      - old_password
    PasswordReset:
      type: object
      description: Serializer for requesting a password reset e-mail.
      properties:
        email:
          type: string
          format: email
      required:
      - email
    PasswordResetConfirm:
      type: object
      description: Serializer for confirming a password reset attempt.
      properties:
        new_password1:
          type: string
          maxLength: 128
        new_password2:
          type: string
          maxLength: 128
        uid:
          type: string
        token:
          type: string
      required:
      - new_password1
      - new_password2
      - token
      - uid
    PatchedUserDetail:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          title: Имя пользователя
          description: Не более 16 символов, не менее 5. Буквы, цифры, @/./+/-/_.
          pattern: ^[\w.@+-]+$
          maxLength: 16
          minLength: 5
        password:
          type: string
          writeOnly: true
          maxLength: 128
        email:
          type: string
          format: email
          nullable: true
          title: Почта
          description: Электронная почта для аккаунта.
          maxLength: 254
        avatar:
          type: string
          format: uri
          title: Аватарка
        timezone:
          type: string
          title: Временная зона
          maxLength: 64
        is_2fa_enabled:
          type: boolean
          title: Включена ли 2FA
    Post:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        author:
          allOf:
          - $ref: '#/components/schemas/User'
          readOnly: true
        signature:
          type: string
          maxLength: 512
        time_added:
          type: string
          readOnly: true
        images:
          type: array
          items:
            $ref: '#/components/schemas/PostImage'
          readOnly: true
        likes_count:
          type: integer
          readOnly: true
        comments_count:
          type: integer
          readOnly: true
      required:
      - author
      - comments_count
      - id
      - images
      - likes_count
      - time_added
    PostID:
      type: object
      properties:
        post_id:
          type: integer
          minimum: 1
      required:
      - post_id
    PostImage:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        image:
          type: string
          format: uri
          readOnly: true
      required:
      - id
      - image
    RestAuthDetail:
      type: object
      properties:
        detail:
          type: string
          readOnly: true
      required:
      - detail
    Token:
      type: object
      properties:
        token:
          type: string
      required:
      - token
    TwoFactorAuthenticationCode:
      type: object
      properties:
        auth_code:
          type: string
          maxLength: 5
          minLength: 5
      required:
      - auth_code
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          title: Имя пользователя
          description: Не более 16 символов, не менее 5. Буквы, цифры, @/./+/-/_.
          pattern: ^[\w.@+-]+$
          maxLength: 16
          minLength: 5
        avatar:
          type: string
          format: uri
          title: Аватарка
      required:
      - id
      - username
    UserDetail:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          title: Имя пользователя
          description: Не более 16 символов, не менее 5. Буквы, цифры, @/./+/-/_.
          pattern: ^[\w.@+-]+$
          maxLength: 16
          minLength: 5
        password:
          type: string
          writeOnly: true
          maxLength: 128
        email:
          type: string
          format: email
          nullable: true
          title: Почта
          description: Электронная почта для аккаунта.
          maxLength: 254
        avatar:
          type: string
          format: uri
          title: Аватарка
        timezone:
          type: string
          title: Временная зона
          maxLength: 64
        is_2fa_enabled:
          type: boolean
          title: Включена ли 2FA
      required:
      - id
      - password
      - username
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
    tokenAuth:
      type: apiKey
      in: header
      name: Authorization
      description: Token-based authentication with required prefix "Token"
